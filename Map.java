
public class Map extends Game{
	static int n = 0;
	static int [][] rmap;
	static int [][] point;
	public static int[][] Getmap(int storey) {
		int [][] map1 ={
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1},
				{1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1},
				{1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1},
				{1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1},
				{1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1},
				{1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1},
				{1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1},
				{1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1},
				{1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1},
				{1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1},
				{1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1},
				{1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1},
				{1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1},
				{1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1},
				{1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1},
				{1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1},
				{1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1},
				{1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1},
				{1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
				{1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1},
				{1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
				{1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1},
				{1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1},
				{1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1},
				{1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1},
				{1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1},
				{1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,5,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			};
		int [][] map2 ={
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,0,0,0,1,0,0,0,0,0,1,0,0,4,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1},
				{1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1},
				{1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1},
				{1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1},
				{1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1},
				{1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,4,1,0,1},
				{1,4,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1},
				{1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1},
				{1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1},
				{1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1},
				{1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1},
				{1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1},
				{1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,4,1},
				{1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1},
				{1,0,1,0,0,0,1,0,0,0,4,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1},
				{1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,4,1,0,1,1,1,1,1},
				{1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1},
				{1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1},
				{1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
				{1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1},
				{1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,4,1},
				{1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1},
				{1,0,0,0,1,4,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1},
				{1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1},
				{1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1},
				{1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1},
				{1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4,0,0,1,0,0,5,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			};
		int [][] map3 ={
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,0,0,0,1,0,0,0,0,0,1,0,0,4,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1},
				{1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1},
				{1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1},
				{1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1},
				{1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1},
				{1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,4,1,0,1},
				{1,4,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1},
				{1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1},
				{1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,6,1},
				{1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1},
				{1,0,1,0,0,0,0,0,1,0,1,6,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1},
				{1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1},
				{1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,4,1},
				{1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1},
				{1,0,1,0,0,0,1,0,0,0,4,0,1,0,0,0,1,0,1,6,1,0,1,0,1,6,0,0,1},
				{1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,4,1,0,1,1,1,1,1},
				{1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1},
				{1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1},
				{1,0,0,0,0,0,0,0,1,0,0,6,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
				{1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1},
				{1,0,0,0,0,6,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,4,1},
				{1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1},
				{1,0,0,0,1,4,0,0,1,0,1,0,0,0,0,0,1,0,1,6,1,0,0,0,1,0,1,0,1},
				{1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1},
				{1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1},
				{1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1},
				{1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4,0,0,1,0,0,5,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			};
		if (storey == 1) return map1;
		else if (storey == 2) return map2;
		else return map3;
	}
	public static int[][] Random(int r, int c) {
		rmap = new int[r][c];
		point = new int[2][(r/2)*(c/2)];
		for (int i = 0; i < r; i++)
			for (int j = 0; j < c; j++)
				rmap[i][j] = 1;
		rmap[1][1] = 0;
		point[0][0] = 1;
		point[1][0] = 1;
		while (n < (r/2)*(c/2)-1) {
			test((int)(Math.random()*(n+1)),r,c);
		}
		return rmap;
	}
	public static void test(int m, int r, int c) {
		boolean [] size = new boolean [4];
		boolean go = true;
		int t= (int)(Math.random()*4);
		int a = point[0][m];
		int b = point[1][m];
		for (int i = 0; i < 4; i++) size[i] = true;
		while ((go)&&(size[0]||size[1]||size[2]||size[3])) {
			switch(t) {
				case 0 : {
					if ((a>2)&&(search(a-2,b))) {
						rmap[a-1][b] = 0;
						rmap[a-2][b] = 0;
						n = n+1;
						point[0][n] = a-2;
						point[1][n] = b;
						go = false;
					}
					else size[t] = false;
				}
				case 1 :{
					if ((a<r-3)&&(search(a+2,b))) {
						rmap[a+1][b] = 0;
						rmap[a+2][b] = 0;
						n = n+1;
						point[0][n] = a+2;
						point[1][n] = b;
						go = false;
					}
					else size[t] = false;
				}
				case 2 :{
					if ((b>2)&&(search(a,b-2))) {
						rmap[a][b-1] = 0;
						rmap[a][b-2] = 0;
						n = n+1;
						point[0][n] = a;
						point[1][n] = b-2;
						go = false;
					}
					else size[t] = false;
				}
				case 3 :{
					if ((b<c-3)&&(search(a,b+2))) {
						rmap[a][b+1] = 0;
						rmap[a][b+2] = 0;
						n = n+1;
						point[0][n] = a;
						point[1][n] = b+2;
						go = false;
					}
					else size[t] = false;
				}
				default : break;
			}
			t= (int)(Math.random()*4);
		}
	}
	public static boolean search(int x,int y) {
		for (int i = 0; i <= n; i++)
			if ((x == point[0][i])&&(y == point[1][i])) return false;
		return true;
	}
	public static void Print() {
		int[][] pmap = new int [map.length][map[0].length];
		for (int i = 0; i < pmap.length; i++) 
			for (int j = 0; j < pmap[0].length; j++) 
			pmap[i][j] = map[i][j];	
		for (int i = 0; i < Nt; i++) pmap[treasure[i].PX][treasure[i].PY] = 6;
		pmap[player.PX][player.PY] = 2;
		for (int i = 0; i < Nm; i++) pmap[monster[i].PX][monster[i].PY] = 4;
		for (int i = 0; i < pmap.length; i++) {
			for (int j = 0; j < pmap[0].length; j++) {
				if (pmap[i][j]== 0) System.out.print("  ");
				if (pmap[i][j]== 1) System.out.print("¨ˆ");
				if (pmap[i][j]== 2) System.out.print("¡â");
				if (pmap[i][j]== 3) System.out.print("¡¤");
				if (pmap[i][j]== 4) System.out.print("¡è");
				if (pmap[i][j]== 5) System.out.print("¡ù");
				if (pmap[i][j]== 6) System.out.print("£¤");
			}
			System.out.println();
		}
	}
}